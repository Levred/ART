#!/usr/bin/env python3
import sys
import tkinter as tk
from tkinter import ttk

from parsimonious.nodes import NodeVisitor, RegexNode

sys.path.append('C:/Users/felix/Documents/INP/2A/Stage/projet/src')
from vtam.interfaceGraphique import MarkerFrame


class XcfilterVisitor(NodeVisitor):
    """
    Visiteur pour xcfilter.
    Le constructeur prend pour argument le dictionnaire 
    des marqueurs à appliquer
    """
    def __init__(self, marqueurs,textbox : tk.Text,marker_frame : MarkerFrame,template_file, output_file):
        self.marqueurs = marqueurs
        self.text_box = textbox
        self.marker_frame = marker_frame
        self.template_file = template_file
        self.output_file = output_file

    def visit_content(self, node, visited_children):
        """ Retourne le resultat de l'application des marqueurs """
        output = ""
        for child in visited_children:
            output += child[0]

        return output
    
    def visit_block(self, node, visited_children):
        """ Retourne :
                - le contenu du marqueur si celui-ci est True
                - rien si le marqueur est False
                - la version intermédiaire si le marqueur n'a pas été spécifié
        """
        contenu = visited_children[1]
        if self.text_box == None or self.marker_frame == None :
            eval_expr = visited_children[0]
        else:
            eval_expr = visited_children[0]
            if isinstance(eval_expr, str):
                self.text_box.insert(tk.INSERT,"".join(contenu),(' '.join(eval_expr.split()[1:-2])))
                self.text_box.tag_add(' '.join(eval_expr.split()[1:-2]),f'insert-{len(contenu)}c',tk.INSERT)
                self.text_box.tag_config(' '.join(eval_expr.split()[1:-2]),foreground=self.marker_frame.colors[' '.join(eval_expr.split()[1:-2])])
            else :
                eval_expr,*marqueur_id = visited_children[0]

        if isinstance(eval_expr, str):
            #print('pas là','marqueur =',eval_expr)
            # Un des marqueurs de l'expression n'a pas ete spécifié
            # on retourne la version intermédiaire du marqueur bloc             
            return "".join(visited_children)
        elif eval_expr:
            ##print('on',eval_expr,marqueur_id)
            # On affiche le contenu du marqueur
            if self.text_box != None :
                self.text_box.insert(tk.INSERT,"".join(contenu),(marqueur_id[0]))
                self.text_box.tag_add(marqueur_id[0],f'insert-{len(contenu)}c',tk.INSERT)
                self.text_box.tag_config(marqueur_id[0],foreground=self.marker_frame.colors[marqueur_id[0]])
            return contenu
        else:
            ##print('off',eval_expr,marqueur_id)
            if self.text_box != None :
                self.text_box.insert(tk.INSERT,"".join(contenu),('off'))
                self.text_box.tag_add('off',f'insert-{len(contenu)}c',tk.INSERT)
                self.text_box.tag_config('off',foreground='#CECECE') 
            return ""

    def visit_block_start(self, node, visited_children):
        """ 
        Retourne le resultat de l'evaluation de l'expression 
        ou bien la version intermédiaire 
        """
        eval_expr = visited_children[3]
        if isinstance(eval_expr, str):
            # On doit retourner la version intermédiaire
            return "".join(visited_children)
        else:
            return eval_expr

    def visit_block_stop(self, node, visited_children):
        """ 
        Retourne le resultat de l'evaluation de l'expression 
        ou bien la version intermédiaire 
        """
        eval_expr = visited_children[3]
        if isinstance(eval_expr, str):
            # On doit retourner la version intermédiaire
            return "".join(visited_children)
        else:
            return eval_expr
    
    def visit_inline(self, node, visited_children):
        """ Retourne :
                - le contenu du marqueur si celui-ci est True
                - rien si le marqueur est False
                - la version intermédiaire si le marqueur n'a pas été spécifié
        """
        contenu = visited_children[1]
        if self.text_box == None or self.marker_frame == None :
            eval_expr = visited_children[0]
        else:
            eval_expr = visited_children[0]
            if isinstance(eval_expr, str):
                #print(eval_expr[2:-2])
                self.text_box.insert(tk.INSERT,"".join(contenu),(eval_expr[2:-2]))
                self.text_box.tag_add(eval_expr[2:-2],f'insert-{len(contenu)}c',tk.INSERT)
                self.text_box.tag_config(eval_expr[2:-2],foreground=self.marker_frame.colors[eval_expr[2:-2]])
            else :
                eval_expr,*marqueur_id = visited_children[0]

        if isinstance(eval_expr, str):
            ##print('pas là','marqueur =',eval_expr)
            # Un des marqueurs de l'expression n'a pas ete spécifié
            # on retourne la version intermédiaire du marqueur bloc             
            return "".join(visited_children)
        elif eval_expr:
            ##print('on',eval_expr,marqueur_id)
            # On affiche le contenu du marqueur
            if self.text_box != None :
                self.text_box.insert(tk.INSERT,"".join(contenu),(marqueur_id[0]))
                self.text_box.tag_add(marqueur_id[0],f'insert-{len(contenu)}c',tk.INSERT)
                self.text_box.tag_config(marqueur_id[0],foreground=self.marker_frame.colors[marqueur_id[0]])
            return contenu
        else:
            ##print('off',eval_expr,marqueur_id)
            if self.text_box != None :
                self.text_box.insert(tk.INSERT,"".join(contenu),('off'))
                self.text_box.tag_add('off',f'insert-{len(contenu)}c',tk.INSERT)
                self.text_box.tag_config('off',foreground='#CECECE') 
            return ""

    def visit_inline_start(self, node, visited_children):
        """ 
        Retourne le resultat de l'evaluation de l'expression 
        ou bien la version intermédiaire 
        """
        eval_expr = visited_children[1]
        if isinstance(eval_expr, str):
            return "".join(visited_children)
        else:
            return eval_expr

    def visit_inline_stop(self, node, visited_children):
        """ 
        Retourne le resultat de l'evaluation de l'expression 
        ou bien la version intermédiaire 
        """
        eval_expr = visited_children[1]
        if isinstance(eval_expr, str):
            return "".join(visited_children)
        else:
            return eval_expr
    
    def visit_inline_content(self, node, visited_children):
        output = ""
        for child in visited_children:
            output += child[0]
        return output

    def visit_text(self, node, visited_children):
        """ Retourne le texte contenu """
        return node.text

    def visit_expr(self, node, visited_children):
        """ Retourne l'expression évaluée """
        return visited_children[0]

    def visit_par_expr(self, node, visited_children):
        return visited_children[1]

    def visit_not(self, node, visited_children):
        """ 
        Retourne la verison intermédiaire ou bien
        l'expression après application de not 
        """
        eval_expr = visited_children[1]
        if isinstance(eval_expr, str):
            return "not " + eval_expr
        else:
            if self.text_box == None or self.marker_frame == None :
                return not eval_expr
            else :
                return not eval_expr[0],eval_expr[1]


    def visit_marqueur_id(self, node, visited_children):
        """ Retourne la valeur du marqueur si celui-ci est spécifié,
        l'id du marqueur sinon"""
        marqueur_id = node.text
        if self.marker_frame != None :
            self.marker_frame.add_marker(marqueur_id,self.template_file,self.output_file)
        if marqueur_id in list(self.marqueurs):
            if self.text_box == None or self.marker_frame == None :
                return self.marqueurs[marqueur_id]
            else :
                return self.marqueurs[marqueur_id],marqueur_id
        else:
            return marqueur_id
        
    def generic_visit(self, node, visited_children):
        if len(node.children) > 0 and isinstance(node.children[0], RegexNode):
            # Pour les RegexNode on retourne directement le texte
            # qui a match
            return node.children[0].text
        else:
            return visited_children or node.text
